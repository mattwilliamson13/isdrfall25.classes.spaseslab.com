{
  "hash": "32f368190a6552d7bfe1ef89205fb5f9",
  "result": {
    "markdown": "---\ntitle: \"Introducing your Data\"\n---\n\n\n## Objectives\n\n1. Practice getting data into `R` from different sources\n2. Learn to identify common import errors\n3. Generate summaries of imported data\n\n## A Note about Project Management\n\nYou'll notice that every repository we use for assignments in this class has a set folder structure (with `data`, `docs`, etc.). This helps ensure that once anyone has cloned the repository all of the paths to files, code, etc will be the same regardless of who's running the code. For this lesson, we'll be working within the `data` folder. You'll notice that within the `data` folder, there is a subfolder for `original` and one for `processed`. **The `original` folder is reserved for unmodified data.** This could be your initial spreadsheet of data, the version of a dataset that you downloaded for an analysis, or any other file that you will eventually modify for your analysis. If you make any changes (rename variables, filter observations, modify values), those changes should be saved to an object in the `processed` folder\n\n::: {.callout-warning}\nFor your analysis to be reproducible, any filtering, cleaning, or modification of that original data should be documented in your scripts or Quarto document and the outputs stored in the `processed` folder.\n\n:::\n\n### Let's load some packages\n\nBefore you get too far into this, it's a good idea to load all of your packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(tigris)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nTo enable caching of data, set `options(tigris_use_cache = TRUE)`\nin your R script or .Rprofile.\n```\n:::\n\n```{.r .cell-code}\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'sf' was built under R version 4.4.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n```\n:::\n:::\n\n\n\n### Common Sources of Data\n\nThere are, in general, three types of data that you will encounter that meet our `original` data criteria. Data you've collected, data you've downloaded from somehere else, or data you've accessed via a package.\n\n#### It's yours!\n\nSo far, this is the type of data that most students bring into class. It's usually some sort of spreadsheet that contains all of that hard-earned field data. Although there are `R` packages for dealing with Microsoft Excel spreadsheets, we won't focus on those for two reasons: 1) Excel is a proprietary software and so may not be available to all users and 2) Excel makes a lot of formatting choices for you that may not actually be helpful in your analysis.\n\nInstead, we'll focus on a more general idea, the \"delimited\" text file. A delimited text file is flat (i.e., there's only one \"sheet\") and uses a consistent character (like a `,` or a `tab`) to denote when column breaks should occur. Delimited text files can be created and read in a variety of free software making them more accessible to others. It's also a fairly trivial exercise to save an Excel spreadsheet into a `.csv`.\n\nThere are a variety of functions in base `R` that will read delimited files (`read.csv`, `read.table`, and `read.delim` are just a few examples), but we're going to use the `readr` package from the `tidyverse` because it will help you get used to some of the `tidyverse` conventions and because it automates more of the data import process. \n\nWe'll talk more about the `tidyverse` next week, but for the time being it's worth knowing that the general structure of `tidyverse` functions is to combine a `verb` with and `object`. So in order to read a delimited file, we might use the `read_delim()` function where `read` is the `verb` and `delim` is the `object`\n\nFor this example, I've downloaded a file from the [Federal Elections Committee](www.fec.gov) depicting the campaign contributions to one of our Congressman in the 2025-2026 fiscal year. It's located in your `data/original` folder. You can read it into your environment using `read_delim` and specifying a `,` for the `delim` argument (if you have tab delimited `.txt` file you would use `\\\\t`). Because we'll want to look at this data later, I'm assigning it to an object called `election_data` using the assignment operator `<-`. If you look at the help file for `read_delim` (by typing `?read_delim`), you'll see that there are a variety of other options (like `read_csv` or `read_tsv`) that allow you to eliminate specifying the `delim` argument. I'll demonstrate that here, too.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelection_data_1 <- read_delim(\"data/original/fec_reciepts.csv\", \n                            delim = \",\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 233 Columns: 78\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (40): committee_id, committee_name, report_type, filing_form, line_numb...\ndbl   (9): report_year, image_number, link_id, file_number, contribution_rec...\nlgl  (27): contributor_prefix, recipient_committee_org_type, is_individual, ...\ndttm  (2): contribution_receipt_date, load_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nelection_data_2 <- read_csv(\"data/original/fec_reciepts.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 233 Columns: 78\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (40): committee_id, committee_name, report_type, filing_form, line_numb...\ndbl   (9): report_year, image_number, link_id, file_number, contribution_rec...\nlgl  (27): contributor_prefix, recipient_committee_org_type, is_individual, ...\ndttm  (2): contribution_receipt_date, load_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n**A Note About Parsing**\n\n\nYou'll notice that both `read_` functions return a bit of output telling you the names and [data types](/resource/dataclasses.html) of each column in the dataset. This is one of the features of using `readr::read_` - it attempts to guess what datatype each column should be based on the value you give to the `guess_max` argument. You can see from the helpfile that the default value for guess_max is `min(1000, n_max)` meaning that it will look at the first `n_max` or 1000 rows, whichever is smaller. This can be helpful for large datasets, but it can also introduce some challenges as the different versions of `read_` assign column types a little differently. You can see this by running:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nidentical(election_data_1, election_data_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nall.equal(election_data_1, election_data_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nDespite the fact that the two objects were created from exactly the same file, `identical` returns `FALSE` while `all.equal ` returns `TRUE`. This is an indication that while the data is exactly the same between both objects, there is something a little different about how `R` is storing the objects (`identical` is very strict). We don't need to worry about that now, but I'm pointing it out as you may run into places where this causes errors that are difficult to interpret. For now, we'll just be excited that the data is in `R`!\n\n#### You download it\n\nOccasionally, you'll find data that is directly downloadable from a webpage (meaning the webaddress points directly to a `.csv` or `.txt` file). When that's the case, you can still use the `read_` functions to download and assign the data to an object. Like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelection_data_web <- read_csv(\"https://raw.githubusercontent.com/BSU-Spatial-Data-In-R-Fall2025/inclass-04/refs/heads/main/data/original/fec_reciepts.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 233 Columns: 78\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (40): committee_id, committee_name, report_type, filing_form, line_numb...\ndbl   (9): report_year, image_number, link_id, file_number, contribution_rec...\nlgl  (27): contributor_prefix, recipient_committee_org_type, is_individual, ...\ndttm  (2): contribution_receipt_date, load_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n::: {.callout-note}\nWhen you call the webpage inside of `read_` the data is not automatically saved. If you've assigned it to an object (like `election_data_web`) it will be stored there until you decide to save it (which we'll do next week). If you haven't assigned it to an object, the data will just be printed to the screen.\n:::\n\nThere are more complicated workflows for `.zip` files (using `download.file`) or Google Drive files (using the `googledrive` package) which we'll introduce later in the course. Those approaches add a bit more syntax on the front-end to get the file into your `data/original` folder, but after that the `read_` step is the same.\n\n\nThe more common way of downloading data from the web is via Application Programming Interfaces (APIs). Although there are lots of APIs in the world, the typical application for getting data is a web-service that expects a particular set of inputs and then returns (possibly for download) a set of outputs matching your query. For example, the US Census has an API that allows you to access all of the Decennial Census and American Community Survey data by providing the state, county, year, and dataset that your are interested in. There are a lot of `R` packages designed to make these API calls easier. For example, the `tidycensus` package in `R` allows easy downloading of Census data, the `FedData` package allows you to download a variety of federally created spatial datasets, and the `elevatr` package allows easy download of global elevation datasets. We'll explore these more in the future, but for now, we'll use a simple example with the `tigris` package. The `tigris` package is a means of accessing the US TIGER (Topologically Integrated Geographic and Referencing System) files. The TIGER datsets contains US roads, state and county boundaries, and a variety of other data related to the US Census. Here's a simple bit of code to download Idaho county boundaries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid_counties <- counties(state=\"ID\", year = 2024, progress_bar = FALSE)\n\nid_counties\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 44 features and 18 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -117.243 ymin: 41.98818 xmax: -111.0435 ymax: 49.00085\nGeodetic CRS:  NAD83\nFirst 10 features:\n    STATEFP COUNTYFP COUNTYNS GEOID        GEOIDFQ       NAME          NAMELSAD\n63       16      051 00399751 16051 0500000US16051  Jefferson  Jefferson County\n150      16      055 00395661 16055 0500000US16055   Kootenai   Kootenai County\n190      16      045 00395442 16045 0500000US16045        Gem        Gem County\n228      16      041 00395585 16041 0500000US16041   Franklin   Franklin County\n234      16      065 00394803 16065 0500000US16065    Madison    Madison County\n258      16      033 00399755 16033 0500000US16033      Clark      Clark County\n306      16      053 00395662 16053 0500000US16053     Jerome     Jerome County\n309      16      037 00399758 16037 0500000US16037     Custer     Custer County\n457      16      019 00395407 16019 0500000US16019 Bonneville Bonneville County\n574      16      049 00395699 16049 0500000US16049      Idaho      Idaho County\n    LSAD CLASSFP MTFCC CSAFP CBSAFP METDIVFP FUNCSTAT       ALAND    AWATER\n63    06      H1 G4020   292  26820     <NA>        A  2832619467  31166194\n150   06      H1 G4020   518  17660     <NA>        A  3205836476 184444918\n190   06      H1 G4020   147  14260     <NA>        A  1449806864  12481361\n228   06      H1 G4020  <NA>  30860     <NA>        A  1717211138  12153472\n234   06      H1 G4020   292  39940     <NA>        A  1215396274  10500950\n258   06      H1 G4020  <NA>   <NA>     <NA>        A  4566524479   2476453\n306   06      H1 G4020  <NA>  46300     <NA>        A  1547629732  12908802\n309   06      H1 G4020  <NA>   <NA>     <NA>        A 12748378762  42527190\n457   06      H1 G4020   292  26820     <NA>        A  4832814957  88912977\n574   06      H1 G4020  <NA>   <NA>     <NA>        A 21956620663  67532942\n       INTPTLAT     INTPTLON                       geometry\n63  +43.7969649 -112.3185879 MULTIPOLYGON (((-111.8045 4...\n150 +47.6759569 -116.6959192 MULTIPOLYGON (((-117.0423 4...\n190 +44.0614727 -116.3987839 MULTIPOLYGON (((-116.7124 4...\n228 +42.1736093 -111.8229653 MULTIPOLYGON (((-111.9336 4...\n234 +43.7886140 -111.6569925 MULTIPOLYGON (((-111.9835 4...\n258 +44.2902180 -112.3546128 MULTIPOLYGON (((-112.3085 4...\n306 +42.6913953 -114.2620858 MULTIPOLYGON (((-113.932 42...\n309 +44.2733510 -114.2522675 MULTIPOLYGON (((-115.305 44...\n457 +43.3951708 -111.6218783 MULTIPOLYGON (((-112.5201 4...\n574 +45.8496440 -115.4673371 MULTIPOLYGON (((-116.4809 4...\n```\n:::\n:::\n\nHere we are providing the API with a state and a year which `counties` converts into an API call to the census page. There are more complicated versions of this that we'll explore down the road once you're more comfortable with the spatial packages.\n\n\n#### It comes with a package\n\nOne final option for obtaining data is that it \"ships\" with a package. That is, when you install the package, you get the data along with the functions. You're not likely to use this much for your own analysis, but it can be critical when you're trying to get help with a coding problem. Most help sites (e.g., StackOverflow, Posit Community) require a [minimally reproducible example](https://forum.posit.co/t/faq-how-to-do-a-minimal-reproducible-example-reprex-for-beginners/23061). Minimally reproducible examples allow others to diagnose your coding problem without you having to share your dataset and without them needing to run all of the cleanup steps.  You can type `library(help = \"datasets\")` to get a list of a variety of example datasets. We'll load the `iris` dataset here just so you can see how it works should you need it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(iris)\nhead(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n:::\n:::\n\n\n### Checking yourself (or at least `R`)\n\nOk, so you've got your data into `R`, the first thing you need to do is to make sure that the import was successful. Before you do anything in `R` it's worth familiarizing yourself with the metadata (data about the data) and building your intuition for how the data _should_ look. Let's take a look at the [page](https://www.fec.gov/data/receipts/?data_type=processed&committee_id=C00331397&two_year_transaction_period=2026) where the data was exported. \n\n#### Did you get it all?\n\nThe first thing we might want to check is whether we actually got all of the date. Based on a quick look at the data it appears that there are 233 observations and columns. We can check that our data matches that by using the `dim` function (short for \"dimensions\").\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(election_data_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 233  78\n```\n:::\n:::\n\n\nThis returns the number of rows and then columns. Based on this we can see that are 233 observations (rows) and 78(!) columns. Where did all of these columns come from??  It's not immediately obvious. You'll notice that if you click on an individual record there's an option to \"View Image\". If you do that, you'll see the actual tax form that is entered into the database. That form actually has 78 boxes so it would appear that we're good on that front.\n\n#### Is it meaningful?\n\nOne of the things that `readr::read_` does is to try and parse the column names in your data and assign it to a particular [data types](/resource/dataclasses.html). That doesn't guarantee, however, that it got it right. We should inspect that. The first thing we might do is take a look at the column names (using the `colnames` function from base `R`). \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(election_data_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"committee_id\"                         \n [2] \"committee_name\"                       \n [3] \"report_year\"                          \n [4] \"report_type\"                          \n [5] \"image_number\"                         \n [6] \"filing_form\"                          \n [7] \"link_id\"                              \n [8] \"line_number\"                          \n [9] \"transaction_id\"                       \n[10] \"file_number\"                          \n[11] \"entity_type\"                          \n[12] \"entity_type_desc\"                     \n[13] \"unused_contbr_id\"                     \n[14] \"contributor_prefix\"                   \n[15] \"contributor_name\"                     \n[16] \"recipient_committee_type\"             \n[17] \"recipient_committee_org_type\"         \n[18] \"recipient_committee_designation\"      \n[19] \"contributor_first_name\"               \n[20] \"contributor_middle_name\"              \n[21] \"contributor_last_name\"                \n[22] \"contributor_suffix\"                   \n[23] \"contributor_street_1\"                 \n[24] \"contributor_street_2\"                 \n[25] \"contributor_city\"                     \n[26] \"contributor_state\"                    \n[27] \"contributor_zip\"                      \n[28] \"contributor_employer\"                 \n[29] \"contributor_occupation\"               \n[30] \"contributor_id\"                       \n[31] \"is_individual\"                        \n[32] \"receipt_type\"                         \n[33] \"receipt_type_desc\"                    \n[34] \"receipt_type_full\"                    \n[35] \"memo_code\"                            \n[36] \"memo_code_full\"                       \n[37] \"memo_text\"                            \n[38] \"contribution_receipt_date\"            \n[39] \"contribution_receipt_amount\"          \n[40] \"contributor_aggregate_ytd\"            \n[41] \"candidate_id\"                         \n[42] \"candidate_name\"                       \n[43] \"candidate_first_name\"                 \n[44] \"candidate_last_name\"                  \n[45] \"candidate_middle_name\"                \n[46] \"candidate_prefix\"                     \n[47] \"candidate_suffix\"                     \n[48] \"candidate_office\"                     \n[49] \"candidate_office_full\"                \n[50] \"candidate_office_state\"               \n[51] \"candidate_office_state_full\"          \n[52] \"candidate_office_district\"            \n[53] \"conduit_committee_id\"                 \n[54] \"conduit_committee_name\"               \n[55] \"conduit_committee_street1\"            \n[56] \"conduit_committee_street2\"            \n[57] \"conduit_committee_city\"               \n[58] \"conduit_committee_state\"              \n[59] \"conduit_committee_zip\"                \n[60] \"donor_committee_name\"                 \n[61] \"national_committee_nonfederal_account\"\n[62] \"election_type\"                        \n[63] \"election_type_full\"                   \n[64] \"fec_election_type_desc\"               \n[65] \"fec_election_year\"                    \n[66] \"two_year_transaction_period\"          \n[67] \"amendment_indicator\"                  \n[68] \"amendment_indicator_desc\"             \n[69] \"schedule_type\"                        \n[70] \"schedule_type_full\"                   \n[71] \"increased_limit\"                      \n[72] \"load_date\"                            \n[73] \"sub_id\"                               \n[74] \"original_sub_id\"                      \n[75] \"back_reference_transaction_id\"        \n[76] \"back_reference_schedule_name\"         \n[77] \"pdf_url\"                              \n[78] \"line_number_label\"                    \n```\n:::\n:::\n\n\nNothing seems obviously wrong here. The names all seem readable and broken into distinct categories which suggests taht the delimitter worked and we didn't end up with oddball columns.\n\n#### Does `R` recognize it?\n\nNow to take a look at whether `readr::read_` correctly guessed the type of data contained in each column. We can use `dplyr::glimpse` from the `tidyverse` or `str` (short for structure) from base `R` to get a quick look at the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(election_data_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 233\nColumns: 78\n$ committee_id                          <chr> \"C00331397\", \"C00331397\", \"C0033…\n$ committee_name                        <chr> \"SIMPSON FOR CONGRESS\", \"SIMPSON…\n$ report_year                           <dbl> 2025, 2025, 2025, 2025, 2025, 20…\n$ report_type                           <chr> \"Q1\", \"Q1\", \"Q1\", \"Q1\", \"Q2\", \"Q…\n$ image_number                          <dbl> 2.025041e+17, 2.025041e+17, 2.02…\n$ filing_form                           <chr> \"F3\", \"F3\", \"F3\", \"F3\", \"F3\", \"F…\n$ link_id                               <dbl> 4.04082e+18, 4.04082e+18, 4.0408…\n$ line_number                           <chr> \"11AI\", \"11AI\", \"11AI\", \"11AI\", …\n$ transaction_id                        <chr> \"AF23BB60932664D8EACA\", \"A7BD67B…\n$ file_number                           <dbl> 1884461, 1884461, 1884461, 18844…\n$ entity_type                           <chr> \"IND\", \"ORG\", \"IND\", \"ORG\", \"IND…\n$ entity_type_desc                      <chr> \"INDIVIDUAL\", \"ORGANIZATION\", \"I…\n$ unused_contbr_id                      <chr> \"C00694323\", NA, \"C00694323\", NA…\n$ contributor_prefix                    <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ contributor_name                      <chr> \"BINGER, KEVIN\", \"WINRED\", \"SLAT…\n$ recipient_committee_type              <chr> \"H\", \"H\", \"H\", \"H\", \"H\", \"H\", \"H…\n$ recipient_committee_org_type          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ recipient_committee_designation       <chr> \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P…\n$ contributor_first_name                <chr> \"KEVIN\", NA, \"LINDSAY\", NA, \"MIT…\n$ contributor_middle_name               <chr> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ contributor_last_name                 <chr> \"BINGER\", NA, \"SLATER\", NA, \"BUT…\n$ contributor_suffix                    <chr> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ contributor_street_1                  <chr> \"12910 CREAMERY HILL DR\", \"PO BO…\n$ contributor_street_2                  <chr> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ contributor_city                      <chr> \"GERMANTOWN\", \"ARLINGTON\", \"WASH…\n$ contributor_state                     <chr> \"MD\", \"VA\", \"DC\", \"VA\", \"MD\", \"V…\n$ contributor_zip                       <chr> \"208746338\", \"222191891\", \"20002…\n$ contributor_employer                  <chr> \"CASSIDY & ASSOCIATES\", NA, \"TRO…\n$ contributor_occupation                <chr> \"SENIOR VICE PRESIDENT\", NA, \"VI…\n$ contributor_id                        <chr> \"C00694323\", NA, \"C00694323\", NA…\n$ is_individual                         <lgl> TRUE, FALSE, TRUE, FALSE, TRUE, …\n$ receipt_type                          <chr> \"15E\", NA, \"15E\", NA, \"15E\", NA,…\n$ receipt_type_desc                     <chr> \"EARMARKED CONTRIBUTION\", NA, \"E…\n$ receipt_type_full                     <chr> \"EARMARKED (NON-DIRECTED) THROUG…\n$ memo_code                             <chr> NA, \"X\", NA, \"X\", NA, \"X\", NA, \"…\n$ memo_code_full                        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ memo_text                             <chr> NA, \"TOTAL EARMARKED THROUGH CON…\n$ contribution_receipt_date             <dttm> 2025-02-05, 2025-02-05, 2025-02…\n$ contribution_receipt_amount           <dbl> 250, 250, 250, 250, 250, 250, 25…\n$ contributor_aggregate_ytd             <dbl> 250, 31900, 250, 31900, 250, 554…\n$ candidate_id                          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ candidate_name                        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ candidate_first_name                  <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ candidate_last_name                   <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ candidate_middle_name                 <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ candidate_prefix                      <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ candidate_suffix                      <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ candidate_office                      <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ candidate_office_full                 <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ candidate_office_state                <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ candidate_office_state_full           <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ candidate_office_district             <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ conduit_committee_id                  <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ conduit_committee_name                <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ conduit_committee_street1             <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ conduit_committee_street2             <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ conduit_committee_city                <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ conduit_committee_state               <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ conduit_committee_zip                 <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ donor_committee_name                  <chr> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ national_committee_nonfederal_account <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ election_type                         <chr> \"P2026\", \"P2026\", \"P2026\", \"P202…\n$ election_type_full                    <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ fec_election_type_desc                <chr> \"PRIMARY\", \"PRIMARY\", \"PRIMARY\",…\n$ fec_election_year                     <dbl> 2026, 2026, 2026, 2026, 2026, 20…\n$ two_year_transaction_period           <dbl> 2026, 2026, 2026, 2026, 2026, 20…\n$ amendment_indicator                   <chr> \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A…\n$ amendment_indicator_desc              <chr> \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"ADD…\n$ schedule_type                         <chr> \"SA\", \"SA\", \"SA\", \"SA\", \"SA\", \"S…\n$ schedule_type_full                    <chr> \"ITEMIZED RECEIPTS\", \"ITEMIZED R…\n$ increased_limit                       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ load_date                             <dttm> 2025-04-12 04:16:48, 2025-04-12…\n$ sub_id                                <dbl> 4.04112e+18, 4.04112e+18, 4.0411…\n$ original_sub_id                       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, …\n$ back_reference_transaction_id         <chr> NA, \"AF23BB60932664D8EACA\", NA, …\n$ back_reference_schedule_name          <chr> NA, \"SA11AI\", NA, \"SA11AI\", NA, …\n$ pdf_url                               <chr> \"https://docquery.fec.gov/cgi-bi…\n$ line_number_label                     <chr> \"Contributions From Individuals/…\n```\n:::\n:::\n\n\nYou'll notice that each column shows up after the `$` operator, followed by the datatype enclosed in `<>`, followed by the first few observations from the dataset. The nice part about `glimpse` is the colored highlighting of `NA` values which can help draw your attention to potential mistakes. For now, we're going to focus on the data types. You'll see `<chr>` for many of the columns indicating that the data in those columns is of the `character` data type, you'll also see `<dbl>` indicating that the column is a `numeric` data type with a \"double float\" precision which refers to the number of decimal points `R` will track for a numeric value. You'll also notice the `<lgl>` or `logical` datatype referring to data that is either `TRUE/FALSE` and the `<dttm>` for dates and times. One thing you might also notice is that for many columns the first set of entries that `glimpse` shows us are entirely `NA`.   When you're working with your own data, hopefully you'll know whether or not `NA`s are appropriate, but here, because this is \"found\" data, it's a good idea here to check a few of the images to see whether these `NA`s are expected. The other thing you'll notice is that a variety of \"ID\" fields (e.g., `sub_id`, `file_id`, `image_id`) were parsed as a `double` data type. This could be a problem as id columns are often meant to denote individuals and so act as a label (i.e., `character`) rather than a number. If there are leading 0's (i.e., 00134) `R` will drop those when converting it to a `numeric` data type. Because we're just looking at the data, we won't worry about it now, but I wanted to draw your attention to it.\n\n### Exploring your new data\n\nOkay, you've got the data into `R` and you've checked that things look correct. Now it's time to get a sense for what the data actually has in it. We might want some information of the distribution of numeric values, frequencies of categorical values, and maybe to look for values that fall outside of the expected range.\n\n\n#### Basic stats\n\nOne quick (and ugly) way to get a sense for the range of values in your data (along with summary stats for numeric data) is to use the `summary` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(election_data_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n committee_id       committee_name      report_year   report_type       \n Length:233         Length:233         Min.   :2025   Length:233        \n Class :character   Class :character   1st Qu.:2025   Class :character  \n Mode  :character   Mode  :character   Median :2025   Mode  :character  \n                                       Mean   :2025                     \n                                       3rd Qu.:2025                     \n                                       Max.   :2025                     \n  image_number       filing_form           link_id          line_number       \n Min.   :2.025e+17   Length:233         Min.   :4.041e+18   Length:233        \n 1st Qu.:2.025e+17   Class :character   1st Qu.:4.041e+18   Class :character  \n Median :2.025e+17   Mode  :character   Median :4.041e+18   Mode  :character  \n Mean   :2.025e+17                      Mean   :4.053e+18                     \n 3rd Qu.:2.025e+17                      3rd Qu.:4.071e+18                     \n Max.   :2.025e+17                      Max.   :4.071e+18                     \n transaction_id      file_number      entity_type        entity_type_desc  \n Length:233         Min.   :1884461   Length:233         Length:233        \n Class :character   1st Qu.:1884461   Class :character   Class :character  \n Mode  :character   Median :1884461   Mode  :character   Mode  :character  \n                    Mean   :1891304                                        \n                    3rd Qu.:1901069                                        \n                    Max.   :1901069                                        \n unused_contbr_id   contributor_prefix contributor_name  \n Length:233         Mode:logical       Length:233        \n Class :character   NA's:233           Class :character  \n Mode  :character                      Mode  :character  \n                                                         \n                                                         \n                                                         \n recipient_committee_type recipient_committee_org_type\n Length:233               Mode:logical                \n Class :character         NA's:233                    \n Mode  :character                                     \n                                                      \n                                                      \n                                                      \n recipient_committee_designation contributor_first_name contributor_middle_name\n Length:233                      Length:233             Length:233             \n Class :character                Class :character       Class :character       \n Mode  :character                Mode  :character       Mode  :character       \n                                                                               \n                                                                               \n                                                                               \n contributor_last_name contributor_suffix contributor_street_1\n Length:233            Length:233         Length:233          \n Class :character      Class :character   Class :character    \n Mode  :character      Mode  :character   Mode  :character    \n                                                              \n                                                              \n                                                              \n contributor_street_2 contributor_city   contributor_state  contributor_zip   \n Length:233           Length:233         Length:233         Length:233        \n Class :character     Class :character   Class :character   Class :character  \n Mode  :character     Mode  :character   Mode  :character   Mode  :character  \n                                                                              \n                                                                              \n                                                                              \n contributor_employer contributor_occupation contributor_id     is_individual  \n Length:233           Length:233             Length:233         Mode :logical  \n Class :character     Class :character       Class :character   FALSE:147      \n Mode  :character     Mode  :character       Mode  :character   TRUE :86       \n                                                                               \n                                                                               \n                                                                               \n receipt_type       receipt_type_desc  receipt_type_full   memo_code        \n Length:233         Length:233         Length:233         Length:233        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n memo_code_full  memo_text         contribution_receipt_date       \n Mode:logical   Length:233         Min.   :2025-01-08 00:00:00.00  \n NA's:233       Class :character   1st Qu.:2025-03-10 00:00:00.00  \n                Mode  :character   Median :2025-03-29 00:00:00.00  \n                                   Mean   :2025-04-09 11:38:22.15  \n                                   3rd Qu.:2025-05-23 00:00:00.00  \n                                   Max.   :2025-06-30 00:00:00.00  \n contribution_receipt_amount contributor_aggregate_ytd candidate_id  \n Min.   : 250                Min.   :  250             Mode:logical  \n 1st Qu.: 500                1st Qu.: 1000             NA's:233      \n Median :1000                Median : 2000                           \n Mean   :1479                Mean   :10836                           \n 3rd Qu.:2000                3rd Qu.: 7500                           \n Max.   :5000                Max.   :55400                           \n candidate_name candidate_first_name candidate_last_name candidate_middle_name\n Mode:logical   Mode:logical         Mode:logical        Mode:logical         \n NA's:233       NA's:233             NA's:233            NA's:233             \n                                                                              \n                                                                              \n                                                                              \n                                                                              \n candidate_prefix candidate_suffix candidate_office candidate_office_full\n Mode:logical     Mode:logical     Mode:logical     Mode:logical         \n NA's:233         NA's:233         NA's:233         NA's:233             \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n candidate_office_state candidate_office_state_full candidate_office_district\n Mode:logical           Mode:logical                Mode:logical             \n NA's:233               NA's:233                    NA's:233                 \n                                                                             \n                                                                             \n                                                                             \n                                                                             \n conduit_committee_id conduit_committee_name conduit_committee_street1\n Mode:logical         Mode:logical           Mode:logical             \n NA's:233             NA's:233               NA's:233                 \n                                                                      \n                                                                      \n                                                                      \n                                                                      \n conduit_committee_street2 conduit_committee_city conduit_committee_state\n Mode:logical              Mode:logical           Mode:logical           \n NA's:233                  NA's:233               NA's:233               \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n conduit_committee_zip donor_committee_name\n Mode:logical          Length:233          \n NA's:233              Class :character    \n                       Mode  :character    \n                                           \n                                           \n                                           \n national_committee_nonfederal_account election_type      election_type_full\n Mode:logical                          Length:233         Mode:logical      \n NA's:233                              Class :character   NA's:233          \n                                       Mode  :character                     \n                                                                            \n                                                                            \n                                                                            \n fec_election_type_desc fec_election_year two_year_transaction_period\n Length:233             Min.   :2026      Min.   :2026               \n Class :character       1st Qu.:2026      1st Qu.:2026               \n Mode  :character       Median :2026      Median :2026               \n                        Mean   :2026      Mean   :2026               \n                        3rd Qu.:2026      3rd Qu.:2026               \n                        Max.   :2026      Max.   :2026               \n amendment_indicator amendment_indicator_desc schedule_type     \n Length:233          Length:233               Length:233        \n Class :character    Class :character         Class :character  \n Mode  :character    Mode  :character         Mode  :character  \n                                                                \n                                                                \n                                                                \n schedule_type_full increased_limit   load_date                     \n Length:233         Mode:logical    Min.   :2025-04-12 04:16:48.00  \n Class :character   NA's:233        1st Qu.:2025-04-12 04:16:48.00  \n Mode  :character                   Median :2025-04-12 04:16:48.00  \n                                    Mean   :2025-05-21 17:29:56.39  \n                                    3rd Qu.:2025-07-17 04:06:49.00  \n                                    Max.   :2025-07-17 04:06:49.00  \n     sub_id          original_sub_id back_reference_transaction_id\n Min.   :4.041e+18   Mode:logical    Length:233                   \n 1st Qu.:4.041e+18   NA's:233        Class :character             \n Median :4.041e+18                   Mode  :character             \n Mean   :4.054e+18                                                \n 3rd Qu.:4.072e+18                                                \n Max.   :4.072e+18                                                \n back_reference_schedule_name   pdf_url          line_number_label \n Length:233                   Length:233         Length:233        \n Class :character             Class :character   Class :character  \n Mode  :character             Mode  :character   Mode  :character  \n                                                                   \n                                                                   \n                                                                   \n```\n:::\n:::\n\n\nWe can look at the `contribution_receipt_amount` and the `contributor_aggregate_ytd` columns as those are the only true `numeric` values. We can see that the `Max` contribution amount for any single observation is 5000 whereas the `Max` aggregate amount is 55400. Looking at the aggregate value a bit more you'll see that the `Mean` is actually larger than the 3rd quartile values which suggests that there are a handful of very larger contributors relative to the rest. If you were planning to analyze this data, you'll have to think about how to deal with those observations carefully.\n\n#### Oddballs\n\nThe other thing that `summary` can help with is identifying places where data is incorrect. For example, this should only be for this FY so the fact that all of the `report_year`values are the same is not surprising. Another thing you might now is that individual contributions are capped at 5000, which we know to be true from the previous check. Finally, `summary` returns the number of `NA`s in each column.\n\n#### Data frequency\n\nOne last thing we might check before we decide what we want to do with this data is to look at the frequency of different categories. We can use `table`to look at a few of those things. We might take a look at how many of these contributions are from individuals. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(election_data_1$is_individual)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nFALSE  TRUE \n  147    86 \n```\n:::\n:::\n\n\nBased on this we can see that the number of contributions by groups outnumbers individuals by almost 2:1. What other categorical variables might you look at?\n\n\nThat's all for now. We'll learn more complicated ways to evaluate and modify data in the coming weeks, but this is a standard \"gut-check\" anytime you're bringing data into `R`. \n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}